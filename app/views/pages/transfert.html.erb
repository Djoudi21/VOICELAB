<body class="body">
  <div class="custom-body">
    <div class="hero-log blue-bg">
      <div class="w-container">
        <div class="hero-usecase--text-left">
          <%= image_tag("cfakepathlogo-blanc-530.png", height: 30, class: "image-11") %>
          <div class="sizejumbo-text sizejumbo-top-clear usecase-title"><strong>Participez</strong> √† La recherche sur l&#x27;iA ET les donn√©es vocales, la recherche Fran√ßaise est en retard.
          </div>
          <div class="lnd_details">Vous souhaitez r√©cup√©rer vos donn√©es? <br>
            Lisez les instructions ci-dessous.
          </div>
          <div class="fe03_container">
            <div class="fe03_card">
              <h3 class="title-h3">üíæ 1. O√π importer ?</h3>
              <p class="paragraph-alias">Choisissez le service de stockage vers lequel vous d√©sirez importer vos donn√©es.</p>
            </div>
            <div class="fe03_card">
              <h3 class="title-h3">üîå 2. Contrat Voicelab</h3>
              <p class="paragraph-alias">Remplissez le contrat d'autorisation d'acc√®s √† vos donn√©es par Voicelab.</p>
            </div>
            <div class="fe03_card">
              <h3 class="title-h3">ü•∞ 3. Acc√®s √† vos donn√©es</h3>
              <p class="paragraph-alias">Une vid√©o explicative vous montrera comment r√©clamer vos donn√©es via l'interface Google.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="w-container">
      <div class="">
        <h3>1.¬†Connectez-vous a votre lieu de stockage</h3>
        <p class="paragraph-alias">Veuillez selectioner votre lieu de stockage</p>
      </div>
      <div class="cta07_button_wrap">
        <%= link_to('/api/storage/gdrive/link?redirect=https%3A%2F%2Fvoicelabs.gdpr.dev%2Ftransfert%2F', class: 'btn', id: 'click') do %>
          <div class="icons8-google-drive"></div>
        <% end %>
        <%= button_tag('', disabled: true, class: 'btn btn-disabled') do %>
          <div class="icons8-dropbox"></div>
        <% end %>
      </div>
    </div>
    <div>
      <%= render 'pages/contract' %>
    </div>
  </div>
  <div class="container padding-40 w-container">
    <div class="form-access w-form">
      <div id="video" class="cta07_main_wrap disabled-form">
        <h3>4. Validez votre demande</h3>
      </div>
      <div style="margin-left: 300px">
        <iframe
              width="560"
              height="315"
              src="https://www.youtube.com/embed/YNpERzRABNY"
              frameborder="0"
              allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen>
        </iframe>
      </div>
      <div class="card-block-single padding">
        <%= link_to 'Obtenir mes donn√©es', "https://takeout.google.com/settings/takeout?pli=1", class: "bt-data-copy noline blue w-button" %>
      </div>
    </div>
  </div>
  <div class="section-large---inner blue">
    <div class="cta01_bar">
      <div class="cta01_text_wrap">
        <div class="cta01_text">Regardez votre bo√Æte email et ouvrez notre email pour la r√©ception de vos donn√©es.</div>
      </div>
    </div>
    <div class="cta01_container">
      <h2 class="cta01_h2-2">Ouvrir mon application de messagerie</h2>
      <div class="div-img-tab">
        <%= link_to ('https://mail.google.com/mail/u/0/') do %>
          <%= image_tag ('icon-gmail.png') %>
        <% end %>
        <%= link_to ('https://outlook.live.com/') do %>
          <%= image_tag ('icon-hotmail.png') %>
        <% end %>
        <%= link_to ('https://login.yahoo.com') do %>
          <%= image_tag ('icon-yahoo.png') %>
        <% end %>
      </div>
    </div>
  </div>
  <div class="container padding-80 w-container">
    <div class="f01_top_wrap">
      <a href="#" class="f01_logo w-nav-brand">
        <h3 class="heading-14">Alias</h3>
      </a>
    </div>
    <div class="f01_columns w-row">
      <div class="f01_column w-col w-col-2 w-col-small-small-stack">
        <div class="f01_title">About us</div>
        <%= link_to 'Contact', requests_new_path, class: "f01_link" %>
        <a href="https://medium.com/@gdprtoken" class="f01_link">Blog</a>
      </div>
      <div class="f01_column w-col w-col-2 w-col-small-small-stack">
        <div class="f01_title">Legal</div>
        <%= link_to 'Terms and conditions', terms_and_conditions_path, class: "f01_link" %>
      </div>
      <div class="f01_column w-col w-col-2 w-col-small-small-stack"></div>
      <div class="f01_column_right w-col w-col-4 w-col-small-small-stack">
        <div class="f01_title">Follow Our Socials</div>
        <div class="f01_social_wrap">
          <div class="f01_social_circle_c">
            <%= link_to ('https://github.com/Djoudi21/VOICELAB') do %>
              <%= image_tag ("icon-github.png") %>
            <% end %>
          </div>
          <div class="f01_social_circle">
            <%= link_to root_path do %>
              <%= image_tag ("icon-twitter.png") %>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- <script type="application/javascript" src="/assets/javascript/plugins/request.js"></script>
 -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jump.js/dist/jump.min.js"></script>
<script>
  // let tata = {"type":"alias.contract","client":{"type":"anychain.signature","date":"Mon, 23 Sep 2019 21:20:23 GMT","signer":{"_bytes":"5HfQie9XLS_WSg3qHAO0nID2NELhxsW6Y0FVsPEPA6k"},"body":{"type":"alias.client.decl","crypto":{"sign":{"bytes":"5HfQie9XLS_WSg3qHAO0nID2NELhxsW6Y0FVsPEPA6k"},"box":{"bytes":"rYCKMvxV5fBt82dL17-cnOIppFv29ArnAXiJEhKQbBg"}},"name":"Voice Labs","desc":"Teach machines how human talks","domain":"demo.gdpr.dev","company":"Voice Labs Inc"},"signature":{"_bytes":"jl-pIUk5o0eQSSY7l4eeokTCx_w3wXPDvItkJKZ3bm5RMc41GBu_Tm8Ywx_SLbcTAHXNmWC8GiGOcp2hr96vBA"}},"legal":{"accept_users_right_access_modify_transfer_delete":true,"automated_decision":false,"automated_surveillance":false,"destination":["Snips Inc","Voxist","Voicelow","Roger Voice"],"email_dpo":"dpo@voicelabs.co","evaluation_notation_rating_profiling":false,"innovative_reasonable_expectations":false,"mixing_reasonable_expectations":false,"storage_duration":"2 years after your Voice Labs account is closed","subprocessors":[],"tos_url":"https://voicelabs.co/tos/","transfer_outside_eea":false,"usage":"(global) Manipulate your Audio recordings lol"},"base":{"consent":[{"scopes":[{"provider":"google","path":"my_activity.assistant"},{"provider":"amazon","path":"alexa"}],"usages":["Train our Speech-to-Text algorithm"]}],"contractual": {"scopes": [{"provider": "google", "path": "my_account.email"}], "usages": ["To keep communication"]}, "legitimate": {"groups": [{"scopes": [{"provider": "google", "path": "my_account.connection_history"}], "usages": ["Detect fraudulent activity"]}], "reason": "For satefy reasons"}}, "network":{"redirectEndpoint": "/cb/"}};

  Vue.component('verb', {
      props: ['value'],
      data: () => { return {}; },
      template: `
  <span v-if="value"><b style="text-transform: uppercase;"><slot></slot></b></span><span v-else-if="!value"><b style="text-transform: uppercase;"><slot></slot> NOT</b></span>
  `,
  });

  var vue = null;

  function deepcloneJSON(x) {
      return JSON.parse(JSON.stringify(x));
  }

  function getContractCallbackURL(contract) {
      const network = contract.network || {};
      const scheme = network.scheme || "https";
      const domain = contract.client.body.domain;
      const endpoint = network.redirectEndpoint || "/alias/cb/";
      if (endpoint.charAt(0) != "/") { throw "bad endpoint"; }
      const url = `${scheme}://${domain}${endpoint}`;
      return url;
  }

  function cbReturnError(contract, error, desc, uri) {
      // const state = (new URL(window.location.href)).searchParams.get('state');

      // let url = getContractCallbackURL(contract) + "?";
      // url = url + "error=" + encodeURIComponent(error);
      // if (desc)  url = url + "&error_description=" + encodeURIComponent(desc);
      // if (uri)   url = url + "&error_uri=" + encodeURIComponent(uri);
      // if (state) url = url + "&state=" + encodeURIComponent(state);

      // window.location.href = url;
      swal("Refus", "Votre contrat n'est pas  valid√©", "error");
  }

  function cbReturn(contract, grant, bind) {
      // const state = (new URL(window.location.href)).searchParams.get('state');

      // let url = getContractCallbackURL(contract) + "?";
      // url = url + "code=" + encodeURIComponent(chain.toToken(grant));
      // url = url + "&bind=" + encodeURIComponent(chain.toToken(bind));
      // if (state) url = url + "&state=" + encodeURIComponent(state);

      // //console.log("redirect to", url);
      // window.location.href = url;
      swal("Validation", "Votre contrat est valid√©", "success");
  }

  async function run() {
      await authed();

      let contractVoicelab = {"type":"alias.contract","client":{"type":"anychain.signature","date":"Mon, 23 Sep 2019 21:20:23 GMT","signer":{"__bytes":"5HfQie9XLS_WSg3qHAO0nID2NELhxsW6Y0FVsPEPA6k"},"body":{"type":"alias.client.decl","crypto":{"sign":{"__bytes":"5HfQie9XLS_WSg3qHAO0nID2NELhxsW6Y0FVsPEPA6k"},"box":{"__bytes":"rYCKMvxV5fBt82dL17-cnOIppFv29ArnAXiJEhKQbBg"}},"name":"Voice Labs","desc":"Teach machines how human talks","domain":"demo.gdpr.dev","company":"Voice Labs Inc"},"signature":{"__bytes":"jl-pIUk5o0eQSSY7l4eeokTCx_w3wXPDvItkJKZ3bm5RMc41GBu_Tm8Ywx_SLbcTAHXNmWC8GiGOcp2hr96vBA"}},"legal":{"accept_users_right_access_modify_transfer_delete":true,"automated_decision":false,"automated_surveillance":false,"destination":["Snips Inc","Voxist","Voicelow","Roger Voice"],"email_dpo":"dpo@voicelabs.co","evaluation_notation_rating_profiling":false,"innovative_reasonable_expectations":false,"mixing_reasonable_expectations":false,"storage_duration":"2 years after your Voice Labs account is closed","subprocessors":[],"tos_url":"https://voicelabs.co/tos/","transfer_outside_eea":false,"usage":"(global) Manipulate your Audio recordings lol"},"base":{"consent":[{"scopes":[{"provider":"google","path":"my_activity.assistant"},{"provider":"amazon","path":"alexa"}],"usages":["Train our Speech-to-Text algorithm"]}],"contractual": {"scopes": [{"provider": "google", "path": "my_account.email"}], "usages": ["To keep communication"]}, "legitimate": {"groups": [{"scopes": [{"provider": "google", "path": "my_account.connection_history"}], "usages": ["Detect fraudulent activity"]}], "reason": "For satefy reasons"}}, "network":{"redirectEndpoint": "/cb/"}}

      const {userSeed, box} = currentSession();
      const idty = openBox(box, userSeed);

      const selfPublicKey = idty.sign.publicKey;
      if (!selfPublicKey) { throw "no sign publicKey set"; }

      const url = new URL(window.location.href);

      // check contract
            var contract = chain.fromJSON(contractVoicelab);

          if (contract.type != 'alias.contract') {
              throw "not a contract";
          }

      const hasContractual = contract.base.contractual && contract.base.contractual.scopes.length != 0 && contract.base.contractual.usages.length != 0;
      const hasConsent = contract.base.consent && contract.base.consent.length != 0;
      const hasLegitimate = contract.base.legitimate && contract.base.legitimate.groups.length != 0;

      const draftContract = deepcloneJSON(contract);
      for (const consent of draftContract.base.consent) {
          for (const scope of consent.scopes) {
              scope.agree = false;
          }
      }

      vue = new Vue({
          el: "#popup",
          data: {
              c: draftContract,
              hasConsent: hasConsent,
              hasContractual: hasContractual,
              hasLegitimate: hasLegitimate,
              showAdvanced: false,
          },
          methods: {
              toggleAdvanced: function() {
                  this.showAdvanced = !this.showAdvanced;
              },
              agree: function() {
                  const consentedScopes = [];
                  for (const consent of this.c.base.consent) {
                      const scopes = [];
                      for (const scope of consent.scopes) {
                          const agreed = scope.agree;
                          scopes.push(agreed);
                      }
                      consentedScopes.push(scopes);
                  }

                  const legitimateScopes = [];
                  for (const legitimate of this.c.base.legitimate.groups) {
                      const scopes = [];
                      for (const scope of legitimate.scopes) {
                          // by default, all legitimate are agreed
                          scopes.push(true);
                      }
                      legitimateScopes.push(scopes);
                  }

                  let grant = {
                      type: "alias.grant",
                      contract: contract,//chain.fold(contract),
                      revoked: false,
                      base: {
                          contractual: true,
                          consent: consentedScopes,
                          legitimate: legitimateScopes,
                      },
                  };

                  grant = chain.sign(idty.sign, grant);
                  console.log("grant:", grant);

                  $.ajax({
                      method: 'POST',
                      url: "/api/contract/grant",
                      data: chain.toToken(grant),
                      contentType: "application/json",
                  }).then((r) => {
                      cbReturn(contract, grant, idty.bind);
                  });
              },
              deny: function() {
                  cbReturnError(contract, "access_denied");
              },
          }
      });

      $("#popup").show();
  };
</script>
<script src="scroll-animate-to.min.js"></script>
<script>
  //recuperer l'element html
  const gdrive = document.getElementById('click');
  const form = document.getElementById('disabled-form');
  const video = document.getElementById('video');
  //atahcer un eventlistener
  gdrive.addEventListener('click', (event) => {
    event.preventDefault();
    form.classList.add('enabled-form');
  const buttonAccept = document.getElementById('yes').disabled=false;
  const buttonDeny = document.getElementById('no').disabled=false;

  });
  const buttonAccept = document.getElementById('yes');
  buttonAccept.addEventListener('click', (event) => {
    event.preventDefault();
    video.classList.add('enabled-form');
  });
</script>
<script>
  function slideDown(el) {
    const elem = document.getElementById(el);
    elem.classList.toggle('visible-section');
  }
  </script>
<script type="applicaton/javascript" src="/javascript/index.js"></script>
<!--     <script type="applicaton/javascript" src="/javascripts/webflow.js"></script -->
<!-- [if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif] -->
</body>
